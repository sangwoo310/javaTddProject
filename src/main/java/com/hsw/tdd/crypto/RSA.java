package com.hsw.tdd.crypto;

import javax.crypto.BadPaddingException;
import javax.crypto.Cipher;
import javax.crypto.IllegalBlockSizeException;
import javax.crypto.NoSuchPaddingException;
import java.io.UnsupportedEncodingException;
import java.security.*;
import java.security.spec.InvalidKeySpecException;
import java.security.spec.PKCS8EncodedKeySpec;
import java.security.spec.X509EncodedKeySpec;
import java.util.Base64;


public class RSA {

    static final String KEY_ALGORITHM = "RSA";

    static final String SIGNATURE_ALGORITHM = "SHA256withRSA";


    /**
     * Generates RSA key pair
     */
    public static KeyPair generateKeyPair() throws NoSuchAlgorithmException {
        KeyPairGenerator gen = KeyPairGenerator.getInstance(KEY_ALGORITHM);
        gen.initialize(1024, new SecureRandom());
        return gen.genKeyPair();
    }

    /**
     * Encrypts the given data with RSA public key
     *
     * @param publicKey Public key to encrypt the given data
     * @param data      Data bytes to be encrypted
     * @return Base64 encoded secret
     */
    public static byte[] encrypt(PublicKey publicKey, byte[] data) throws NoSuchPaddingException,
            NoSuchAlgorithmException, InvalidKeyException, BadPaddingException, IllegalBlockSizeException {
        Cipher cipher = Cipher.getInstance(KEY_ALGORITHM);
        cipher.init(Cipher.ENCRYPT_MODE, publicKey);
        return cipher.doFinal(data);
    }

    /**
     * Decrypts the given base64 encoded secret data which is encrypted with RSA public key
     *
     * @param privateKey Private key to decrypt the given data
     * @param secret     Base64 encoded secret data to be decrypted
     * @return decrypted data byte array
     */
    public static byte[] decrypt(PrivateKey privateKey, String secret)
            throws NoSuchPaddingException, NoSuchAlgorithmException, InvalidKeyException, BadPaddingException,
            IllegalBlockSizeException, UnsupportedEncodingException {
        Cipher cipher = Cipher.getInstance(KEY_ALGORITHM);
        cipher.init(Cipher.DECRYPT_MODE, privateKey);
        return cipher.doFinal(Base64.getDecoder().decode(secret));
    }

    /**
     * Signs the given data with the given private key and
     * returns the signature. Signature algorithm is SHA256withRSA.
     *
     * @param privateKey Private key to sign the given data
     * @param dataBytes  Data to be signed
     * @return Base64 encoded siganture
     */
    public static String sign(PrivateKey privateKey, byte[] dataBytes) throws SignatureException, InvalidKeyException,
            NoSuchAlgorithmException {
        Signature signature = Signature.getInstance(SIGNATURE_ALGORITHM);
        signature.initSign(privateKey);
        signature.update(dataBytes);
        return Base64.getEncoder().encodeToString(signature.sign());
    }

    /**
     * Verifies whether the given signature is generated by signing
     * the given data with the private key corresponds to the given
     * public key. Signature algorithm is SHA256withRSA.
     *
     * @param publicKey Public key corresponding to the private key signed the given data
     * @param dataBytes Data signed corresponding to the given signature
     * @param signature Base64 encoded signature
     * @return true if verifies, false otherwise
     */
    public static boolean verify(PublicKey publicKey, byte[] dataBytes, String signature) throws InvalidKeyException,
            SignatureException, NoSuchAlgorithmException {
        Signature signatureInstance = Signature.getInstance(SIGNATURE_ALGORITHM);
        signatureInstance.initVerify(publicKey);
        signatureInstance.update(dataBytes);
        return signatureInstance.verify(Base64.getDecoder().decode(signature));
    }

    /**
     * Loads RSA public key from the given X509Encoded public key bytes
     *
     * @param keyBytes
     */
    public static PublicKey loadPublicKey(byte[] keyBytes)
            throws NoSuchAlgorithmException, InvalidKeySpecException {
        KeyFactory kf = KeyFactory.getInstance(KEY_ALGORITHM);
        return kf.generatePublic(new X509EncodedKeySpec(keyBytes));
    }

    /**
     * Loads RSA private key from the given PKCS#8 encoded key bytes
     *
     * @param keyBytes PKCS#8 encoded key byte array
     */
    public static PrivateKey loadPiravetKey(byte[] keyBytes) throws InvalidKeySpecException,
            NoSuchAlgorithmException {
        KeyFactory kf = KeyFactory.getInstance(KEY_ALGORITHM);
        PKCS8EncodedKeySpec keySpecPKCS8 = new PKCS8EncodedKeySpec(keyBytes);
        return kf.generatePrivate(keySpecPKCS8);
    }

}